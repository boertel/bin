#!/usr/bin/python

import subprocess
import sys 
import getopt
import os

def mv(source, target):
    mv = "mv %s %s" % (source, target)
    p = subprocess.Popen(mv, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = p.communicate()

def log(relative, f, last_user):
    message = f
    if last_user:
        gitlg = "git log -1 --pretty=format:%%h%%x09%%an%%x09%%ad%%x09%%s --date=relative -- %s" % relative
        p = subprocess.Popen(gitlg, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        l, err = p.communicate()
        if log != '':
            rest = len(f) / 8
            tab = 6 - rest
            message += tab * '\t'  + ('| %s' % l)
    return message



def main(argv):
    target = '.'
    force = False
    found = False
    not_found = True
    last_user = False
    ask_size = False

    index_found = 0
    size = 0

    if len(argv) >= 1:
        source = argv[0]
    else:
        print 'At least 1 argument: source'
        sys.exit(2)

    try:
        opts, args = getopt.getopt(argv[1:], 's:t:fu', ['source', 'target', 'force', 'not-found', 'found', 'user', 'size'])
    except getopt.GetoptError, e:
        print e
        sys.exit(2)


    for opt, arg in opts:
        if opt in ('-t', '--target'):
            target = arg
        elif opt in ('-s', '--source'):
            source = arg
        elif opt in ('-f', '--force'):
            force = True
        elif opt in ('--not-found',):
            not_found = True
            found = False
        elif opt in ('--found',):
            found = True
            not_found = False
        elif opt in ('-u', '--user'):
            last_user = True
        elif opt in ('--size'):
            ask_size = True


    if source:
        files = os.listdir(source)
        if os.path.isabs(source):
            absolute_path = source
        else:
            absolute_path = os.path.abspath(source)

        trash = os.path.join(absolute_path, 'trash/')
        if not os.path.exists(trash):
            os.mkdir(trash)

        for f in files:
            absolute_file = os.path.join(absolute_path, f)
            relative_path = os.path.join(source, f)

            if os.path.isdir(absolute_file):
                continue

            grep = "git grep -n %s %s" % (f, target)
            p = subprocess.Popen(grep, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            out, err = p.communicate()
            if out == '':           # Not found
                if ask_size:
                    size += os.path.getsize(absolute_file)
                if not_found:
                    print log(relative_path, f, last_user)
                    if force:
                        mv(absolute_file, trash)
            else:
                index_found += 1
                if found:
                    print '---------------------------------------------------------------'
                    print log(relative_path, f, last_user)
                    print out
                    yon = raw_input('[Y/N]')
                    print yon
                    if yon == 'Y' or yon == 'y':
                        mv(absolute_file, trash)


        print '---------------------------------------------------------------'
        message = 'total: %s' % len(files)
        if not_found:
            num = (len(files) - index_found)
            message += ' | not found: %s' % num
        else:
            num = index_found
            message += ' | found: %s' % num
        
        print message

        if ask_size:
            print 'bytes saved: %s' % size
                
if __name__ == "__main__":
    try:
        main(sys.argv[1:])
    except KeyboardInterrupt:
        print '\nexit'
        sys.exit(0)
